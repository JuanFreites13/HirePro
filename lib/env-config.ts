/**
 * Configuraci√≥n de variables de entorno para el cliente
 * Este archivo expone las variables de entorno de forma m√°s directa
 */

// Variables de entorno de Supabase
export const SUPABASE_CONFIG = {
  url: process.env.NEXT_PUBLIC_SUPABASE_URL || '',
  anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '',
  serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY || ''
}

// Funci√≥n para obtener configuraci√≥n desde runtime config (fallback)
export const getRuntimeConfig = () => {
  if (typeof window !== 'undefined' && (window as any).__NEXT_DATA__?.props?.supabaseUrl) {
    return {
      url: (window as any).__NEXT_DATA__.props.supabaseUrl,
      anonKey: (window as any).__NEXT_DATA__.props.supabaseAnonKey,
    }
  }
  return SUPABASE_CONFIG
}

// Verificar si Supabase est√° configurado
export const isSupabaseConfigured = (): boolean => {
  // Intentar con variables de entorno directas
  if (SUPABASE_CONFIG.url && SUPABASE_CONFIG.anonKey) {
    return true
  }
  
  // Intentar con runtime config como fallback
  const runtimeConfig = getRuntimeConfig()
  return !!(runtimeConfig.url && runtimeConfig.anonKey)
}

// Obtener configuraci√≥n de Supabase
export const getSupabaseConfig = () => {
  return SUPABASE_CONFIG
}

// Verificar configuraci√≥n en tiempo de ejecuci√≥n
export const verifySupabaseConfig = () => {
  console.log('üîß Verificando configuraci√≥n de Supabase...')
  console.log('URL:', SUPABASE_CONFIG.url ? '‚úÖ Configurada' : '‚ùå No configurada')
  console.log('Anon Key:', SUPABASE_CONFIG.anonKey ? '‚úÖ Configurada' : '‚ùå No configurada')
  console.log('Service Key:', SUPABASE_CONFIG.serviceKey ? '‚úÖ Configurada' : '‚ùå No configurada')
  
  if (isSupabaseConfigured()) {
    console.log('‚úÖ Supabase est√° configurado correctamente')
    return true
  } else {
    console.log('‚ùå Supabase no est√° configurado')
    return false
  }
}

// Configuraci√≥n del entorno
export const ENV_CONFIG = {
  isDevelopment: process.env.NODE_ENV === 'development',
  isProduction: process.env.NODE_ENV === 'production',
  isTest: process.env.NODE_ENV === 'test'
}

// Exportar configuraci√≥n completa
export default {
  supabase: SUPABASE_CONFIG,
  env: ENV_CONFIG,
  isSupabaseConfigured,
  getSupabaseConfig,
  verifySupabaseConfig
}
