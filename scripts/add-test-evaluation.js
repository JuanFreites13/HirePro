// Script para agregar una evaluaci√≥n de prueba
const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://cyxzlsshmteudtvinzrj.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5eHpsc3NobXRldWR0dmluenJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyMDQ2MDgsImV4cCI6MjA3MDc4MDYwOH0.ZnP0vDHGT4BVaupCxF0E4ws5bVWwgwqMnArDWYqpciJ'

const supabase = createClient(supabaseUrl, supabaseKey)

async function addTestEvaluation() {
  console.log('üß™ AGREGANDO EVALUACI√ìN DE PRUEBA')
  console.log('==================================\n')

  try {
    // 1. Obtener candidatos disponibles
    console.log('1. üìã Obteniendo candidatos...')
    const { data: candidates, error: candidatesError } = await supabase
      .from('candidates')
      .select('id, name, email')
      .limit(5)
    
    if (candidatesError) {
      console.log('‚ùå Error al obtener candidatos:', candidatesError.message)
      return
    }
    
    if (!candidates || candidates.length === 0) {
      console.log('‚ùå No hay candidatos disponibles')
      return
    }
    
    console.log('‚úÖ Candidatos encontrados:')
    candidates.forEach(candidate => {
      console.log(`   - ID: ${candidate.id}, Nombre: ${candidate.name}, Email: ${candidate.email}`)
    })
    console.log()

    // 2. Crear evaluaci√≥n de prueba
    const testEvaluation = {
      candidate_id: candidates[0].id,
      evaluation_type: 'entrevista',
      score: 8,
      feedback: 'Excelente candidato con s√≥lida experiencia t√©cnica. Demostr√≥ habilidades avanzadas en programaci√≥n y control industrial. Comunicaci√≥n clara y capacidad de resoluci√≥n de problemas. Recomendado para avanzar a la siguiente etapa. Fortalezas: Conocimiento t√©cnico, experiencia pr√°ctica, capacidad de aprendizaje. √Åreas de mejora: Podr√≠a beneficiarse de m√°s experiencia en proyectos de gran escala.',
      stage: '1¬™ entrevista'
    }

    console.log('2. üéØ Creando evaluaci√≥n de prueba...')
    console.log('üìù Datos:', testEvaluation)
    console.log()

    const { data: createdEvaluation, error: createError } = await supabase
      .from('candidate_evaluations')
      .insert(testEvaluation)
      .select()
      .single()

    if (createError) {
      console.log('‚ùå ERROR AL CREAR EVALUACI√ìN:')
      console.log('‚ùå C√≥digo:', createError.code)
      console.log('‚ùå Mensaje:', createError.message)
      console.log('‚ùå Detalles:', createError.details)
    } else {
      console.log('‚úÖ EVALUACI√ìN CREADA EXITOSAMENTE:')
      console.log('‚úÖ ID:', createdEvaluation.id)
      console.log('‚úÖ Candidato:', candidates[0].name)
      console.log('‚úÖ Tipo:', createdEvaluation.evaluation_type)
      console.log('‚úÖ Puntaje:', createdEvaluation.score)
      console.log('‚úÖ Etapa:', createdEvaluation.stage)
      console.log('‚úÖ Fecha:', new Date(createdEvaluation.created_at).toLocaleString())
    }

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar script
addTestEvaluation()
  .then(() => {
    console.log('\nüéØ SCRIPT COMPLETADO')
    console.log('====================')
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå Error fatal:', error)
    process.exit(1)
  })

